#!/bin/sh
# *** Under construction ***
# This is a quick installation to use for v2.0.2 release.
# This requires more work for further use.

# Make a release of h5check.
# This is modified from the same command in the HDF5 library.
#
# Creation date: 2013-10-24
#
# Modifications
#

# Function definitions
#
# Print Usage page
USAGE()
{
cat << EOF
Usage: $0 [--nocheck] [-d <dir>] [-h] <methods> ...
   -d DIR	The name of the directory where the releas(es) should be
                placed.  By default, the directory is ./releases

   --nocheck	Ignore errors in MANIFEST file.
         
   --private	Make a private release with today's date in version information.
         
The other command-line options are the names of the programs to use
for compressing the resulting tar archive (if none are given then
"tar md5" is assumed):

    tar		-- use tar and don't do any compressing.
    compress	-- use compress and append ".Z" to the output name.
    gzip	-- use gzip with "-9" and append ".gz" to the output name.
    bzip2       -- use bzip2 with "-9" and append ".bz2" to the output name.
    md5         -- produce a md5 checksum in addition to the archive.

Examples:

    $ release
    releases/h5check-1.0.38.tar
    releases/h5check-1.0.38.tar.md5

    $ release gzip
    releases/h5check-1.0.38.tar.gz

    $ release -d /tmp tar compress gzip bzip2 md5
    /tmp/h5check-1.0.38.tar
    /tmp/h5check-1.0.38.tar.Z
    /tmp/h5check-1.0.38.tar.gz
    /tmp/h5check-1.0.38.tar.bz2
    /tmp/h5check-1.0.38.tar.md5

EOF

}

# This command must be run at the top level of the h5check source directory.
# Verify this requirement.
if [ ! \( -f configure -a -f bin/release \) ]; then
    echo "$0 must be run at the top level of the h5check source directory"
    exit 1
fi

# Defaults
DEST=releases
VERS=`bin/h5check_vers`
VERS_OLD=
test "$VERS" || exit 1
verbose=yes
check=yes
release_date=`date +%F`
today=`date +%Y%m%d`
pmode='no'
tmpdir="../#release_tmp.$$"	# tmp work directory

# Command-line arguments
while [ -n "$1" ]; do
    arg=$1
    shift
    case "$arg" in
	-d)
	    DEST=$1
	    shift
	    ;;
	--nocheck)
	    check=no
	    ;;
	-h)
	    USAGE
	    exit 0
	    ;;
	--private)
	    pmode=yes
	    ;;
	-*)
	    echo "Unknown switch: $arg" 1>&2
	    USAGE
	    exit 1
	    ;;
	*)
	    methods="$methods $arg"
	    ;;
    esac
done

# Default methods are tar and md5
if [ "X$methods" = "X" ]; then
    methods="gzip md5"
fi

# Create the temporary work directory.
if mkdir $tmpdir; then
    echo "temporary work directory for release.  "\
         "Can be deleted after release completes." > $tmpdir/README
else
    echo "Failed to mkdir tmpdir($tmpdir)"
    exit 1
fi


# Store h5check-$VERS ("h5check-1.7.51", e.g.) to a variable to avoid typos
SW_VERS=h5check-$VERS

test "$verbose" && echo "Releasing $SW_VERS to $DEST" 1>&2
if [ ! -d $DEST ]; then
    echo "   Destination directory $DEST does not exist" 1>&2
    exit 1
fi

# Check the validity of the MANIFEST file.
bin/chkmanifest || fail=yes
if [ "X$fail" = "Xyes" ]; then
    if [ $check = yes ]; then
        exit 1
    else
	echo "Continuing anyway..."
    fi
fi

# Create a manifest that contains only files for distribution.
MANIFEST=$tmpdir/H5_MANIFEST
grep '^\.' MANIFEST | grep -v _DO_NOT_DISTRIBUTE_ >$MANIFEST

# Prepare the source tree for a release.
ln -s `pwd` $tmpdir/$SW_VERS || exit 1
# Save a backup copy of Makefile if exists.
#test -f Makefile && mv Makefile $tmpdir/Makefile.x
#cp -p Makefile.dist Makefile

# Update README and doc/RELEASE.txt with release information in
# line 1.
for f in README doc/RELEASE.txt; do
    echo "H5CHECK version $VERS released on $release_date." >$f.x
    sed -e 1d $f >>$f.x
    mv $f.x $f
    # Make sure new files are of the right access mode
    chmod 644 $f
done

# Create the tar file
test "$verbose" && echo "   Running tar..." 1>&2
( \
    cd $tmpdir; \
    tar cf $SW_VERS.tar \
	`sed 's/^\.\//h5check-'$VERS'\//' $MANIFEST` || exit 1 \
)

# Compress
for comp in $methods; do
    case $comp in
	tar)
	    cp -p $tmpdir/$SW_VERS.tar $DEST/$SW_VERS.tar
	    ;;
	compress)
	    test "$verbose" && echo "   Running compress..." 1>&2
	    compress -c <$tmpdir/$SW_VERS.tar >$DEST/$SW_VERS.tar.Z
	    ;;
	gzip)
	    test "$verbose" && echo "   Running gzip..." 1>&2
	    gzip -9 <$tmpdir/$SW_VERS.tar >$DEST/$SW_VERS.tar.gz
	    ;;
	bzip2)
	    test "$verbose" && echo "   Running bzip2..." 1>&2
	    bzip2 -9 <$tmpdir/$SW_VERS.tar >$DEST/$SW_VERS.tar.bz2
	    ;;
	md5)
	    test "$verbose" && echo "   Creating checksum..." 1>&2
	    (cd $tmpdir; md5sum $SW_VERS.tar ) > $DEST/$SW_VERS.tar.md5
	    ;;
    esac
done

# Copy the RELEASE.txt to the release area.
cp doc/RELEASE.txt $DEST/$SW_VERS-RELEASE.txt

# Remove distributed Makefile and restore previous Makefile if existed.
rm -f Makefile
test -f $tmpdir/Makefile.x && mv $tmpdir/Makefile.x Makefile

# Restore OLD version information, then no need for trap.
if [ X$pmode = Xyes ]; then
    RESTORE_VERSION
    trap 0
fi

# Remove temporary things
rm -rf $tmpdir

exit 0
